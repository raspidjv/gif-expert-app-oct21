{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","repetido","setRepetido","onSubmit","e","preventDefault","trim","length","c","a","find","console","log","type","value","onChange","target","getGifs","cat","txtsearch","encodeURI","url","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","categoria","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","category","i","ReactDOM","render","document","getElementById"],"mappings":"yMAEaA,EAAc,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KA2CA,OACI,mCACA,uBAAMC,SArCW,SAACC,GAClBA,EAAEC,iBAEEN,EAAWO,OAAOC,OAAS,IAE3BV,GAAe,SAAAW,GAQC,IAAMC,EAAID,EAAEE,MAAM,SAACN,GAAD,OAAOA,IAAML,KAG/B,OAAKU,GAMDE,QAAQC,IAAI,gCACZV,GAAY,GACL,YAAIM,KANXN,GAAY,GACN,CAAEH,GAAR,mBAAuBS,QAU3CR,EAAc,IACdW,QAAQC,IAAI,kBAOhB,UAEI,uBACGC,KAAK,OACLC,MAAOf,EACPgB,SA/Ce,SAACX,GAEvBJ,EAAcI,EAAEY,OAAOF,UAiDbb,GAAY,0D,+BC3DjBgB,EAAO,uCAAG,WAAOC,GAAP,yBAAAT,EAAA,4DACH,mCACVU,EAAYC,UAAUF,GACb,KACTG,EAAM,0CAA0CF,EAA1C,qDAJO,SAKAG,MAAOD,GALP,cAKbE,EALa,OAOnBZ,QAAQC,IAAIS,GAPO,UASEE,EAAKC,OATP,wBASZC,EATY,EASZA,KAIDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MACI,CACCC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,QAlBxB,kBAyBZK,GAzBY,4CAAH,sDCEPO,EAAc,SAAEL,GAEzB,OACI,sBAAKM,UAAU,4CAAf,UAEI,qBAAKC,IAAKP,EAAIP,IAAKe,IAAKR,EAAIE,QAC5B,kCAAKF,EAAIE,aCFRO,EAAU,SAAC,GAAY,IAAVnB,EAAS,EAATA,IAQtB,ECXwB,SAACoB,GAEzB,MAA0BxC,mBAAS,CAC/B2B,KAAK,GACLc,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiCA,OA1BAC,qBAAW,WAEHzB,EAAQqB,GACLK,MAAM,SAAAC,GAELC,YAAY,WACRJ,EAAS,CACLhB,KAAMmB,EACNL,SAAS,MAIf,QAEX,CAACD,IAYGE,EDxBwBM,CAAa5B,GAAhCa,EAAZ,EAAON,KAAac,EAApB,EAAoBA,QAapB,OACI,qCAEA,oBAAIL,UAAU,oCAAd,SAAmDhB,IACjDqB,GAAW,mBAAGL,UAAU,mCAAb,yBAGb,qBAAKA,UAAU,YAAf,SAEKH,EAAOJ,KACJ,SAACC,GACG,OAEI,aADA,CACC,EAAD,eAGQA,GAFCA,EAAIC,aEpCxBkB,EAAe,WAMxB,MAAoCjD,mBAAS,IAA7C,mBAAOkD,EAAP,KAAmBnD,EAAnB,KAOA,OACI,qCACE,8CACA,cAAC,EAAD,CAAcA,cAAeA,IAC7B,uBAGA,6BAEImD,EAAWrB,KAAK,SAACsB,EAAUC,GAEzB,OAAQ,cAAC,EAAD,CAGNhC,IAAK+B,GADAA,Y,MCzBvBE,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.8230b40e.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nexport const AddCategory = ({setCategories} ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [repetido, setRepetido] = useState(false);\r\n\r\n\r\n    const handleInputchange = (e) => {\r\n        // console.log(e.target.value);\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault(); // para prevenir el posteo completo de la pagina y su refresh\r\n\r\n        if( inputValue.trim().length > 0 ) {\r\n            // setCategories( c => [...c, inputValue] );\r\n            setCategories( c => { \r\n                        // si el valor de inputValue ya existe en las categorias C, no se agrega\r\n                        // asi se evita el id duplicado\r\n                        // const a = c.find( (e) => {\r\n                        // //console.log(e);\r\n                        //         return( e === inputValue);\r\n                        // });\r\n                        \r\n                            const a = c.find( (e) => e === inputValue);\r\n                            //console.log(a); // a tiene el valor si se encontro repetido o undefined si no se encontro\r\n                            \r\n                            if( !a) { \r\n                                // return [...c, inputValue];\r\n                                setRepetido(false);\r\n                                return [inputValue, ...c];\r\n                               }\r\n                            else { \r\n                                console.log('valor repetido, no se agrega');\r\n                                setRepetido(true);\r\n                                return [...c];\r\n                            }\r\n                       } );\r\n\r\n\r\n            setInputValue('');\r\n            console.log('Submit hecho');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <form onSubmit = {handleSubmit}>\r\n            {/* <h3>Add Category</h3> */}\r\n            <input\r\n               type=\"text\"\r\n               value={inputValue}\r\n               onChange={ handleInputchange }\r\n            />\r\n        \r\n               {/* { (repetido && alert('Categoria ya existe'))} */}\r\n               { (repetido && <p>Categoria ya existe</p>)}\r\n       \r\n        </form>\r\n        </>\r\n    )\r\n}\r\n\r\n","export const getGifs = async (cat) => {\r\n    const api_key = 'ZXGpaSWnVAlEWYnjzAd4zvfJOT63KmWL';\r\n    const txtsearch = encodeURI(cat); //'Uruguay';\r\n    const giflimit='10';\r\n    const url = 'https://api.giphy.com/v1/gifs/search?q='+txtsearch+'&limit='+giflimit+'&api_key=' + api_key;\r\n    const resp = await fetch( url);\r\n\r\n    console.log(url);\r\n    \r\n    const {data} = await resp.json();\r\n\r\n    // console.log(data);\r\n\r\n    const gifs = data.map( img => {\r\n        return(\r\n            {\r\n             id: img.id,\r\n             title: img.title,\r\n             url: img.images?.downsized_medium.url\r\n            }\r\n        )\r\n    })\r\n\r\n    // console.log(gifs);\r\n    // setImages(gifs);\r\n    return gifs;\r\n\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ( img) => {\r\n    //  console.log(img);\r\n    return (\r\n        <div className=\"card animate__animated animate__heartBeat\">\r\n            {/* <li > {img.title}  </li> */}\r\n            <img src={img.url} alt={img.title} />\r\n            <p> {img.title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n// import  { useEffect, useState } from 'react'\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ( {cat}) => {\r\n\r\n    // const [images, setImages] = useState([]);\r\n\r\n    // console.log(\"gigGrid\");\r\n    // const state = useFetchGifs();\r\n    // console.log(state);\r\n\r\n    const {data:images, loading} = useFetchGifs(cat);\r\n\r\n    // console.log(data);\r\n    // console.log(loading);\r\n\r\n    // useEffect( () => {\r\n    //     getGifs(cat)\r\n    //       .then( imgs => setImages(imgs) );\r\n    // }, [ cat] )\r\n\r\n   \r\n    // getGifs();\r\n\r\n    return (\r\n        <>\r\n\r\n        <h3 className=\"animate__animated animate__fadeIn\">{cat}</h3>\r\n        { loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\r\n\r\n        {/* {loading ? 'Cargando...': 'Carga finalizada'} */}\r\n        <div className=\"card-grid\">\r\n         \r\n            {images.map(\r\n                (img) => {\r\n                    return (\r\n                        // <li key = {img.id}> {img.title}  </li>\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            // img = {img} \r\n                            {...img} />\r\n                    );\r\n                }\r\n            )}\r\n           \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (categoria) => {\r\n\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true\r\n    })\r\n\r\n// console.log(categoria);\r\n\r\n    useEffect( () => {\r\n\r\n            getGifs(categoria)\r\n              .then( imgs => {\r\n\r\n                setTimeout( () => {\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n                    // console.log(imgs);\r\n\r\n                },0)\r\n              });\r\n    }, [categoria]);\r\n\r\n    // setTimeout( () => {\r\n    //     setState({\r\n    //         data:[1,2,3],\r\n    //         loading: false\r\n    //     });\r\n\r\n    // },3000);\r\n\r\n    // console.log(state);\r\n\r\n    return state; // data[], loading: true\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    // const categories = [ 'One punch','Samurai', 'Dragon'];\r\n    // const [categories, setCategories] = useState([ 'One punch','Samurai', 'Dragon']);\r\n  \r\n    // const [categories, setCategories] = useState([ 'One punch']);\r\n    const [categories, setCategories] = useState([ ]);\r\n\r\n    // const handleAdd = () => {\r\n    //   // setCategories( [...categories,'Nueva']);\r\n    //   setCategories( c => [...c, 'Nueva']);\r\n    // }\r\n\r\n    return (\r\n        <>\r\n          <h1>GifExpertApp</h1>  \r\n          <AddCategory  setCategories={setCategories} />\r\n          <hr />\r\n\r\n          {/* <button onClick={handleAdd} >Agregar</button> */}\r\n          <ol>\r\n            {\r\n              categories.map( (category, i )=> {\r\n                // return (<li key={ category + i.toString() }>{category}</li>);\r\n                return (<GifGrid \r\n                  // key={category + i.toString() }\r\n                  key={category}\r\n                  cat={category} \r\n                />);\r\n              })\r\n            }\r\n          </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}